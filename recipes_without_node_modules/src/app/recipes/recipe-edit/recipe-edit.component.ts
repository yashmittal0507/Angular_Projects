import { Component, OnInit } from '@angular/core';
import { ActivatedRoute,Params,Router } from '@angular/router';
import { FormGroup,FormControl,FormArray,Validators } from '@angular/forms';
import { RecipieService } from '../recipie.service';
import { Recipe } from '../recipe.model';
import * as fromRecipe from '../store/recipe.reducers';
import * as fromRecipeActions from '../store/recipe.actions'
import { Store } from '@ngrx/store';



@Component({
  selector: 'app-recipe-edit',
  templateUrl: './recipe-edit.component.html',
  styleUrls: ['./recipe-edit.component.css']
})
export class RecipeEditComponent implements OnInit {
id:number;
editMode = false;
recipieForm:FormGroup;
  constructor(private route:ActivatedRoute,private recipieService:RecipieService,
  private router:Router,private store:Store<fromRecipe.FeatureState>) { }

  ngOnInit() {
    this.route.params.subscribe(
      (params:Params) => {
        this.id =params['id'];
        this.editMode=params['id']!=null;
        this.initForm();
        console.log(this.editMode);

      }
    )
  }

  private initForm(){
    let recipieName='';
    let recipieImage ='';
    let recipieDescription ='';
    let recipeIngredients = new FormArray([]);

    if(this.editMode){
     
      this.store.select('recipes')
      .take(1)
      .subscribe((recipeState:fromRecipe.State)=>{
        const recipie=recipeState.recipe[this.id]
        recipieName=recipie.name;
        recipieImage=recipie.imagePath;
        recipieDescription=recipie.description;
  
        if(recipie['ingredients']){
          for(let ingredient of recipie.ingredients){
                recipeIngredients.push(
                    new FormGroup({
                      'name':new FormControl(ingredient.name,Validators.required),
                      'amount':new FormControl(ingredient.amount,[Validators.required,Validators.pattern(/^[1-9]+[0-9]*$/)])
                    })
            )
  
          }
            
        }
      })
     
    }

    this.recipieForm =new FormGroup({
      'name': new FormControl(recipieName,Validators.required),
      'imageUrl': new FormControl(recipieImage,Validators.required),
      'description':new FormControl(recipieDescription,Validators.required),
      'ingredients':recipeIngredients
    })
  }

  onSubmit(){
    const recipe = new Recipe(this.recipieForm.value.name,this.recipieForm.value.description,
      this.recipieForm.value.imageUrl,this.recipieForm.value.ingredients
    )
    if(this.editMode){
     
      // this.recipieService.updateExistingRecipie(this.id,recipe);
      this.store.dispatch(new fromRecipeActions.UpdateRecipe({index:this.id,updateRecipe:recipe}))
    }
    else {
          //  this.recipieService.onAddRecipie(recipe);
          this.store.dispatch(new fromRecipeActions.AddRecipe(recipe));
    }
    this.onCancel();


    console.log(this.recipieForm)
  }
  onAddIngredients(){
    (<FormArray>this.recipieForm.get('ingredients')).push(
        new FormGroup({
          'name':new FormControl(),
          'amount':new FormControl()
        })
    )
    
  }
  onDelete(index:number){
    (<FormArray>this.recipieForm.get('ingredients')).removeAt(index);
    
  }

  onCancel(){
    this.router.navigate(['../'],{relativeTo:this.route})
  }

}
