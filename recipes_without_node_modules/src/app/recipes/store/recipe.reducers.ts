import { Recipe } from "../recipe.model";
import { Ingredient } from "../../shared/ingredient.model";
import * as RecipeActions from './recipe.actions';
import { AppState } from "../../store/app.reducers";

export interface FeatureState extends AppState {
    recipes:State
}

export interface State {
    recipe:Recipe[]
    
    
 }
 
 
 const initialState:State = {
    recipe: [ 
        new Recipe(
          'Tasty Schnitzel',
          'A super-tasty Schnitzel - just awesome!',
          'https://upload.wikimedia.org/wikipedia/commons/7/72/Schnitzel.JPG',
          [
            new Ingredient('Meat', 1),
            new Ingredient('French Fries', 20)
          ]),
        new Recipe('Big Fat Burger',
          'What else you need to say?',
          'https://upload.wikimedia.org/wikipedia/commons/b/be/Burger_King_Angus_Bacon_%26_Cheese_Steak_Burger.jpg',
          [
            new Ingredient('Buns', 2),
            new Ingredient('Meat', 1)
          ])
      ]
    
 }
export function recipeReducers(state=initialState,actions:RecipeActions.RecipeActions){
    switch(actions.type){
        case RecipeActions.SET_RECIPES:
            return {
                ...state,
                recipe:[...actions.payload]
           
           
            }
        case RecipeActions.ADD_RECIPE:
            return {
                ...state,
                recipe:[...state.recipe,actions.payload]
            }
        case RecipeActions.UPDATE_RECIPE:
            const recipe = state.recipe[actions.payload.index];
            const updatedRecipe = {
                ...recipe,...actions.payload.updateRecipe
            }
            const recipes =[...state.recipe]
            recipes[actions.payload.index]=updatedRecipe
            return {
                ...state,
                recipe:recipes
                
            }
        case RecipeActions.DELETE_RECIPE:
            const oldRecipe =[...state.recipe]
            oldRecipe.splice(actions.payload,1)
            return {
                ...state,
                recipe:oldRecipe
            }
        default:
            return state
    }

}