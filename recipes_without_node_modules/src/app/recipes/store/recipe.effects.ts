import {Effect,Actions} from '@ngrx/effects';
import { HttpClient,HttpRequest} from '@angular/common/http';
import * as RecipeActions from './recipe.actions';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/withLatestFrom';
import { Injectable } from '@angular/core';
import { Recipe } from '../recipe.model';
import * as fromRecipeState from './recipe.reducers';
import { Store } from '@ngrx/store';

@Injectable()
export class RecipeEffects{
@Effect()
recipeFetch =this.action$.ofType(RecipeActions.GET_RECIPES)
.switchMap((action:RecipeActions.GetRecipes)=>{
    return this.httpClient.get<Recipe[]>('https://ng-recipe-app-d18f8.firebaseio.com/recipes.json'
,{
    observe:'body',
    responseType:'json'
})
})
    .map( 
        (recipes) =>{
         console.log(recipes);
        for(let recipe of recipes){
           
            if(!recipe['ingredients']){
             console.log(recipe);
                recipe['ingredients']=[];
            }
        }
        return {
            type:RecipeActions.SET_RECIPES,
            payload:recipes
        }
        
     }
    )
   
    @Effect({dispatch:false})
    recipeStore =this.action$.ofType(RecipeActions.STORE_RECIPES)
    .withLatestFrom(this.store.select('recipes'))
    .switchMap(([action,state])=>{
        const req =new HttpRequest('PUT','https://ng-recipe-app-d18f8.firebaseio.com/recipes.json',
        state.recipe,{reportProgress:true} );

        return this.httpClient.request(req);
    })


constructor(private action$:Actions,private httpClient:HttpClient,
private store:Store<fromRecipeState.FeatureState>){}
}
